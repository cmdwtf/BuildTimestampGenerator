<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <IsRoslynComponent>true</IsRoslynComponent>

    <RootNamespace>cmdwtf.BuildTimestampGenerator</RootNamespace>
    <AssemblyName>$(RootNamespace)</AssemblyName>
    <Deterministic>true</Deterministic>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <LangVersion>preview</LangVersion>
    <GenerateDocumentation>false</GenerateDocumentation>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <NeutralLanguage>en</NeutralLanguage>

    <VersionPrefix>1.0.1</VersionPrefix>
    <VersionSuffix>$(VersionSuffix)</VersionSuffix>

    <PackageReleaseNotes>Initial release.</PackageReleaseNotes>
    <Description>A small source generator that outputs a class, `BuildTimestamp`, that contains several variables that describe when the source generator was run (and thus when your project was built.)</Description>
    <PackageTags>source generator;build time;timestamp;datetime;datetimeoffset;analyzer;roslyn</PackageTags>
    <Product>cmd.wtf BuildTimestampGenerator</Product>

    <Authors>Chris Marc Dailey (nitz)</Authors>
    <PackageId>$(AssemblyName)</PackageId>
    <Company>cmd.wtf</Company>
    <Copyright>Â© 2022 Chris Marc Dailey</Copyright>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <IncludeSymbols>true</IncludeSymbols>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <PackageIcon>timestamp-icon-alt.png</PackageIcon>
    <PackageLicenseExpression>0BSD</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageProjectUrl>https://cmd.wtf/projects/buildtimestamp</PackageProjectUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/cmdwtf/BuildTimestampGenerator</RepositoryUrl>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Title>$(Product)</Title>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
    <PackageReference Include="Microsoft.CodeAnalysis" Version="3.9.0" PrivateAssets="All" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup>
    <cd>$(MSBuildThisFileDirectory)</cd>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="$(cd).meta\$(PackageIcon)" Visible="false">
      <PackagePath>.\</PackagePath>
    </Content>
    <Content Include="$(cd)\LICENSE; $(cd)\copyright; $(cd)\*.md" Visible="false">
      <PackagePath>.\</PackagePath>
    </Content>
  </ItemGroup>

  <!-- force the assembly into the proper path for analyzers -->
  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

  <!-- workaround for sourcelink issue: https://github.com/dotnet/sourcelink/issues/572 -->
  <PropertyGroup>
    <TargetFrameworkMonikerAssemblyAttributesPath>$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)"/>
  </ItemGroup>
  <!-- end workaround for sourcelink issue -->

</Project>
